@page "/"
@using HelloDallE8.Models;
@using HelloDallE8.Services;
@using HelloDallE8.Components;

@inject IDallEComms DallEComms
@inject IDataService DataService
@inject ResponseState questionState
@inject IAzureOpenAISettings aoaiSettings

@rendermode InteractiveServer

<PageTitle>Questions</PageTitle>

<FluentMainLayout>

    <Header>
        <h3>Questions</h3>
    </Header>

    <Body>
        <FluentStack Orientation="Orientation.Vertical"> 
            @foreach (var Question in Questions)
            {
                <QuestionsComponent Model="@Question">
                </QuestionsComponent>
            }            
        </FluentStack>
    </Body>        
        
</FluentMainLayout>

<InputTextArea @bind-Value="DallEComms.PromptText" class="col-12" /><button @onclick="SubmitPrompt">Submit</button><br/>

@if (DallEComms.LastContentUrl != null)
{
    <div id="ImagePromptText">@ImagePromptText</div>
    <div>
        <img src="@DallEComms.LastContentUrl" />
    </div>
}

@code{
    public Dictionary<string, string> Responses = new Dictionary<string, string>();

    private List<QuestionViewModel> Questions;
    private string ImagePromptText = "";
    private string questionNumber = "col-6";

    protected override void OnInitialized()
    {
        Questions = DataService.Questions;

        questionState.OnResponseChanged += ResponseStateHasChanged;
    }

    //method to handle the state change of the response
    private void ResponseStateHasChanged()
    {
        Responses = questionState.Responses;
    }

    private async Task SubmitPrompt()
    {
        var responseValuesCsv = String.Join(",", Responses.Values);

        //take the array of responses and generate a prompt

        var kernel = new SemanticKernelTextCompletionService(aoaiSettings);

        kernel.SK_PromptCreation(responseValuesCsv);
        var PromptForImage = await kernel.InvokePromptAsync();

        //go get my image!
        await DallEComms.RequestImage();

        //save the prompt text for display.
        ImagePromptText = DallEComms.PromptText;

        //clear the text box of the prompt.
        DallEComms.PromptText = string.Empty;

        // clear QuestionComponent formatting on buttons
        foreach (var question in Questions)
        {
            foreach (var answer in question.Answers)
            {
                answer.IsActive = false;
            }
        }
    }
}
